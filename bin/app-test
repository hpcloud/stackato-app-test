#!/bin/bash

set -e

source "${BASH_SOURCE%/*}/setup.bash"

main() {
  name=${1:?'First argument is app name'}

  cd "${BASH_SOURCE%/*}/.."

  mkdir -p log
  logfile="$PWD/log/$name.log"
  test_type="$(git config -f conf/apps.ini "app.$name.test" || true)"
  push_args="$(git config -f conf/apps.ini "app.$name.push-args" || true)"

  (
    read-conf
    (
      cd "$apps_directory/$name"

      echo
      echo "=== Testing 'stackato push $push_args -n' for '$name'"
      echo

      time stackato push $push_args -n || true
      sleep 5
    )
  ) 2>&1 | tee "$logfile"
  (
    PASS=false
    if [ "$test_type" == "manual" ]; then
      manual-test
    else
      check-push
    fi
    if $PASS; then
      echo "$name passed test, so deleting instance now."
      stackato delete -n "$name" || true
    fi
    if [[ "$(< $logfile)" =~ $'\n'real$'\t'([0-9]+)m([0-9]+) ]]; then
      m="${BASH_REMATCH[1]}"
      s="${BASH_REMATCH[2]}"
      set-time "$(( m * 60 + s ))"
    fi
  ) 2>&1 | tee --append "$logfile"
}

check-push() {
  local url="$(grep -E '^http.*deployed$' $logfile | tail -n1 | cut -d' ' -f1)"
  if [ -n "$url" ]; then
    head="$(HEAD $url || true)"
    if [ -n "$(echo "$head" | grep -E '^200 OK$')" ]; then
      tag-pass
    else
      echo "FAILED with:"$'\n'"$head"
      tag-fail
    fi
  else
    tag-fail
  fi
}

tag-pass() {
  PASS=true
  tag-app PASS
  untag-app FAIL
}

tag-fail() {
  PASS=false
  tag-app FAIL
  untag-app PASS
}

set-time() {
  git config -f conf/apps.ini "app.$name.time" "$1"
}

tag-app() {
  echo "tag $name $1"
  git config -f conf/apps.ini --unset "app.$name.tag" "^$1\$" || true
  git config -f conf/apps.ini --add "app.$name.tag" "$1"
}

untag-app() {
  echo "untag $name $1"
  git config -f conf/apps.ini --unset "app.$name.tag" "^$1\$" || true
}

manual-test() {
  local a=
  if [ "$(prompt "*** MANUAL CHECK: Does it look OK? [yN] ")" == y ]; then
    tag-pass
  else
    tag-fail
  fi
}

[ "$BASH_SOURCE" == "$0" ] && main "$@"

# vim: set lisp:
